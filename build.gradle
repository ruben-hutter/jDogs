plugins {
    id 'idea'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.media']
}

group 'ch.unibas.dmi.dbis'
version '0.0.1-ALPHA'
mainClassName = 'jDogs/Main'

//specifies source compatibility to Java 11
sourceCompatibility = 1.11

//adds maven central as a maven repository
repositories {
    mavenCentral()
    jcenter()
}

/* The following lines are extensively documented. Please remove the documentation when you have read and understood it. */
dependencies {

    // EXAMPLE: LOGGING
    /*
    The following adds the logging framework Apache Log4J2.
    The statements serve as an example on how to use libraries.
    Since these are `implementation` dependencies, they are packed in the final jar.
    Read the documentation at https://docs.gradle.org/current/userguide/declaring_dependencies.html to learn more
     */
    implementation 'org.apache.logging.log4j:log4j-api:2.+'
    implementation 'org.apache.logging.log4j:log4j-core:2.+'

    /*
    This is another example - it imports the javafx-controls dependency
     */
    implementation 'org.openjfx:javafx-controls:11.0.2'
    implementation 'org.jetbrains:annotations:20.1.0'

    // JUNIT
    /*
    The following dependency is required to perform JUnit tests, as for example HelloWorldTest.
    Since it is a `testCompile` dependency, it will not be part of the final product, only during testing.
     */
    testImplementation 'junit:junit:4.+'
    implementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    compile 'org.junit.jupiter:junit-jupiter:5.6.2'

    //the following dependency is used to animate stuff
    implementation 'io.github.typhon0:AnimateFX:1.2.1'

    // GUAVA
    /*
    this should add GuavaLibrary for EventBus
     */
    implementation "com.google.guava:guava-gwt:30.1.1-jre"

}

test{
    useJUnitPlatform()
}

/*
The following block adds both compile and runtime dependencies to the jar
 */
jar {
    manifest {
        attributes(
            'Main-Class': 'jDogs/Main'
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register("build-cs108") {
    group = 'build'
    description = "Creates executable jar and javadoc"
    dependsOn  javadoc, jar
}
